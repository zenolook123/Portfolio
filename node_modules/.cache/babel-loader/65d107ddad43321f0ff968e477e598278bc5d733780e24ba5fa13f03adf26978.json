{"ast":null,"code":"import * as e from \"react\";\nfunction n() {\n  return n = Object.assign ? Object.assign.bind() : function (e) {\n    for (var n = 1; n < arguments.length; n++) {\n      var t = arguments[n];\n      for (var r in t) Object.prototype.hasOwnProperty.call(t, r) && (e[r] = t[r]);\n    }\n    return e;\n  }, n.apply(this, arguments);\n}\nconst t = [\"children\", \"options\"];\nvar r, i;\n!function (e) {\n  e.blockQuote = \"0\", e.breakLine = \"1\", e.breakThematic = \"2\", e.codeBlock = \"3\", e.codeFenced = \"4\", e.codeInline = \"5\", e.footnote = \"6\", e.footnoteReference = \"7\", e.gfmTask = \"8\", e.heading = \"9\", e.headingSetext = \"10\", e.htmlBlock = \"11\", e.htmlComment = \"12\", e.htmlSelfClosing = \"13\", e.image = \"14\", e.link = \"15\", e.linkAngleBraceStyleDetector = \"16\", e.linkBareUrlDetector = \"17\", e.linkMailtoDetector = \"18\", e.newlineCoalescer = \"19\", e.orderedList = \"20\", e.paragraph = \"21\", e.ref = \"22\", e.refImage = \"23\", e.refLink = \"24\", e.table = \"25\", e.tableSeparator = \"26\", e.text = \"27\", e.textBolded = \"28\", e.textEmphasized = \"29\", e.textEscaped = \"30\", e.textMarked = \"31\", e.textStrikethroughed = \"32\", e.unorderedList = \"33\";\n}(r || (r = {})), function (e) {\n  e[e.MAX = 0] = \"MAX\", e[e.HIGH = 1] = \"HIGH\", e[e.MED = 2] = \"MED\", e[e.LOW = 3] = \"LOW\", e[e.MIN = 4] = \"MIN\";\n}(i || (i = {}));\nconst l = [\"allowFullScreen\", \"allowTransparency\", \"autoComplete\", \"autoFocus\", \"autoPlay\", \"cellPadding\", \"cellSpacing\", \"charSet\", \"className\", \"classId\", \"colSpan\", \"contentEditable\", \"contextMenu\", \"crossOrigin\", \"encType\", \"formAction\", \"formEncType\", \"formMethod\", \"formNoValidate\", \"formTarget\", \"frameBorder\", \"hrefLang\", \"inputMode\", \"keyParams\", \"keyType\", \"marginHeight\", \"marginWidth\", \"maxLength\", \"mediaGroup\", \"minLength\", \"noValidate\", \"radioGroup\", \"readOnly\", \"rowSpan\", \"spellCheck\", \"srcDoc\", \"srcLang\", \"srcSet\", \"tabIndex\", \"useMap\"].reduce((e, n) => (e[n.toLowerCase()] = n, e), {\n    for: \"htmlFor\"\n  }),\n  o = {\n    amp: \"&\",\n    apos: \"'\",\n    gt: \">\",\n    lt: \"<\",\n    nbsp: \" \",\n    quot: \"“\"\n  },\n  c = [\"style\", \"script\"],\n  a = /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi,\n  s = /mailto:/i,\n  d = /\\n{2,}$/,\n  u = /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/,\n  p = /^ *> ?/gm,\n  f = /^ {2,}\\n/,\n  h = /^(?:( *[-*_])){3,} *(?:\\n *)+\\n/,\n  m = /^\\s*(`{3,}|~{3,}) *(\\S+)?([^\\n]*?)?\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)*\\n?/,\n  g = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/,\n  y = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,\n  k = /^(?:\\n *)*\\n/,\n  x = /\\r\\n?/g,\n  v = /^\\[\\^([^\\]]+)](:.*)\\n/,\n  b = /^\\[\\^([^\\]]+)]/,\n  $ = /\\f/g,\n  S = /^\\s*?\\[(x|\\s)\\]/,\n  w = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/,\n  C = /^ *(#{1,6}) +([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/,\n  E = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/,\n  A = /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i,\n  O = /&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/gi,\n  T = /^<!--[\\s\\S]*?(?:-->)/,\n  L = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/,\n  z = /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i,\n  M = /^\\{.*\\}$/,\n  I = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,\n  R = /^<([^ >]+@[^ >]+)>/,\n  U = /^<([^ >]+:\\/[^ >]+)>/,\n  j = /-([a-z])?/gi,\n  B = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/,\n  N = /^\\[([^\\]]*)\\]:\\s+<?([^\\s>]+)>?\\s*(\"([^\"]*)\")?/,\n  H = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/,\n  D = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/,\n  P = /(\\[|\\])/g,\n  _ = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/,\n  F = /\\t/g,\n  W = /^ *\\| */,\n  G = /(^ *\\||\\| *$)/g,\n  Z = / *$/,\n  q = /^ *:-+: *$/,\n  V = /^ *:-+ *$/,\n  X = /^ *-+: *$/,\n  Q = /^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/,\n  J = /^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1|\\w)/,\n  K = /^==((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)==/,\n  Y = /^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/,\n  ee = /^\\\\([^0-9A-Za-z\\s])/,\n  ne = /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&#;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i,\n  te = /^\\n+/,\n  re = /^([ \\t]*)/,\n  ie = /\\\\([^\\\\])/g,\n  le = / *\\n+$/,\n  oe = /(?:^|\\n)( *)$/,\n  ce = \"(?:\\\\d+\\\\.)\",\n  ae = \"(?:[*+-])\";\nfunction se(e) {\n  return \"( *)(\" + (1 === e ? ce : ae) + \") +\";\n}\nconst de = se(1),\n  ue = se(2);\nfunction pe(e) {\n  return new RegExp(\"^\" + (1 === e ? de : ue));\n}\nconst fe = pe(1),\n  he = pe(2);\nfunction me(e) {\n  return new RegExp(\"^\" + (1 === e ? de : ue) + \"[^\\\\n]*(?:\\\\n(?!\\\\1\" + (1 === e ? ce : ae) + \" )[^\\\\n]*)*(\\\\n|$)\", \"gm\");\n}\nconst ge = me(1),\n  ye = me(2);\nfunction ke(e) {\n  const n = 1 === e ? ce : ae;\n  return new RegExp(\"^( *)(\" + n + \") [\\\\s\\\\S]+?(?:\\\\n{2,}(?! )(?!\\\\1\" + n + \" (?!\" + n + \" ))\\\\n*|\\\\s*\\\\n*$)\");\n}\nconst xe = ke(1),\n  ve = ke(2);\nfunction be(e, n) {\n  const t = 1 === n,\n    r = t ? xe : ve,\n    i = t ? ge : ye,\n    l = t ? fe : he;\n  return {\n    match(e, n, t) {\n      const i = oe.exec(t);\n      return i && (n.list || !n.inline && !n.simple) ? r.exec(e = i[1] + e) : null;\n    },\n    order: 1,\n    parse(e, n, r) {\n      const o = t ? +e[2] : void 0,\n        c = e[0].replace(d, \"\\n\").match(i);\n      let a = !1;\n      return {\n        items: c.map(function (e, t) {\n          const i = l.exec(e)[0].length,\n            o = new RegExp(\"^ {1,\" + i + \"}\", \"gm\"),\n            s = e.replace(o, \"\").replace(l, \"\"),\n            d = t === c.length - 1,\n            u = -1 !== s.indexOf(\"\\n\\n\") || d && a;\n          a = u;\n          const p = r.inline,\n            f = r.list;\n          let h;\n          r.list = !0, u ? (r.inline = !1, h = s.replace(le, \"\\n\\n\")) : (r.inline = !0, h = s.replace(le, \"\"));\n          const m = n(h, r);\n          return r.inline = p, r.list = f, m;\n        }),\n        ordered: t,\n        start: o\n      };\n    },\n    render: (n, t, r) => e(n.ordered ? \"ol\" : \"ul\", {\n      key: r.key,\n      start: \"20\" === n.type ? n.start : void 0\n    }, n.items.map(function (n, i) {\n      return e(\"li\", {\n        key: i\n      }, t(n, r));\n    }))\n  };\n}\nconst $e = /^\\[([^\\]]*)]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/,\n  Se = /^!\\[([^\\]]*)]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/,\n  we = [u, m, g, w, E, C, T, B, ge, xe, ye, ve],\n  Ce = [...we, /^[^\\n]+(?:  \\n|\\n{2,})/, A, z];\nfunction Ee(e) {\n  return e.replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, \"a\").replace(/[çÇ]/g, \"c\").replace(/[ðÐ]/g, \"d\").replace(/[ÈÉÊËéèêë]/g, \"e\").replace(/[ÏïÎîÍíÌì]/g, \"i\").replace(/[Ññ]/g, \"n\").replace(/[øØœŒÕõÔôÓóÒò]/g, \"o\").replace(/[ÜüÛûÚúÙù]/g, \"u\").replace(/[ŸÿÝý]/g, \"y\").replace(/[^a-z0-9- ]/gi, \"\").replace(/ /gi, \"-\").toLowerCase();\n}\nfunction Ae(e) {\n  return X.test(e) ? \"right\" : q.test(e) ? \"center\" : V.test(e) ? \"left\" : null;\n}\nfunction Oe(e, n, t) {\n  const r = t.inTable;\n  t.inTable = !0;\n  const i = n(e.trim(), t);\n  t.inTable = r;\n  let l = [[]];\n  return i.forEach(function (e, n) {\n    \"26\" === e.type ? 0 !== n && n !== i.length - 1 && l.push([]) : (\"27\" !== e.type || null != i[n + 1] && \"26\" !== i[n + 1].type || (e.text = e.text.replace(Z, \"\")), l[l.length - 1].push(e));\n  }), l;\n}\nfunction Te(e, n, t) {\n  t.inline = !0;\n  const r = Oe(e[1], n, t),\n    i = e[2].replace(G, \"\").split(\"|\").map(Ae),\n    l = function (e, n, t) {\n      return e.trim().split(\"\\n\").map(function (e) {\n        return Oe(e, n, t);\n      });\n    }(e[3], n, t);\n  return t.inline = !1, {\n    align: i,\n    cells: l,\n    header: r,\n    type: \"25\"\n  };\n}\nfunction Le(e, n) {\n  return null == e.align[n] ? {} : {\n    textAlign: e.align[n]\n  };\n}\nfunction ze(e) {\n  return function (n, t) {\n    return t.inline ? e.exec(n) : null;\n  };\n}\nfunction Me(e) {\n  return function (n, t) {\n    return t.inline || t.simple ? e.exec(n) : null;\n  };\n}\nfunction Ie(e) {\n  return function (n, t) {\n    return t.inline || t.simple ? null : e.exec(n);\n  };\n}\nfunction Re(e) {\n  return function (n) {\n    return e.exec(n);\n  };\n}\nfunction Ue(e, n, t) {\n  if (n.inline || n.simple) return null;\n  if (t && !t.endsWith(\"\\n\")) return null;\n  let r = \"\";\n  e.split(\"\\n\").every(e => !we.some(n => n.test(e)) && (r += e + \"\\n\", e.trim()));\n  const i = r.trimEnd();\n  return \"\" == i ? null : [r, i];\n}\nfunction je(e) {\n  try {\n    if (decodeURIComponent(e).replace(/[^A-Za-z0-9/:]/g, \"\").match(/^\\s*(javascript|vbscript|data(?!:image)):/i)) return;\n  } catch (e) {\n    return null;\n  }\n  return e;\n}\nfunction Be(e) {\n  return e.replace(ie, \"$1\");\n}\nfunction Ne(e, n, t) {\n  const r = t.inline || !1,\n    i = t.simple || !1;\n  t.inline = !0, t.simple = !0;\n  const l = e(n, t);\n  return t.inline = r, t.simple = i, l;\n}\nfunction He(e, n, t) {\n  const r = t.inline || !1,\n    i = t.simple || !1;\n  t.inline = !1, t.simple = !0;\n  const l = e(n, t);\n  return t.inline = r, t.simple = i, l;\n}\nfunction De(e, n, t) {\n  return t.inline = !1, e(n, t);\n}\nconst Pe = (e, n, t) => ({\n  children: Ne(n, e[1], t)\n});\nfunction _e() {\n  return {};\n}\nfunction Fe() {\n  return null;\n}\nfunction We(...e) {\n  return e.filter(Boolean).join(\" \");\n}\nfunction Ge(e, n, t) {\n  let r = e;\n  const i = n.split(\".\");\n  for (; i.length && (r = r[i[0]], void 0 !== r);) i.shift();\n  return r || t;\n}\nfunction Ze(t, r = {}) {\n  r.overrides = r.overrides || {}, r.slugify = r.slugify || Ee, r.namedCodesToUnicode = r.namedCodesToUnicode ? n({}, o, r.namedCodesToUnicode) : o;\n  const i = r.createElement || e.createElement;\n  function d(e, t, ...l) {\n    const o = Ge(r.overrides, `${e}.props`, {});\n    return i(function (e, n) {\n      const t = Ge(n, e);\n      return t ? \"function\" == typeof t || \"object\" == typeof t && \"render\" in t ? t : Ge(n, `${e}.component`, e) : e;\n    }(e, r.overrides), n({}, t, o, {\n      className: We(null == t ? void 0 : t.className, o.className) || void 0\n    }), ...l);\n  }\n  function G(n) {\n    let t = !1;\n    r.forceInline ? t = !0 : r.forceBlock || (t = !1 === _.test(n));\n    const i = le(ie(t ? n : `${n.trimEnd().replace(te, \"\")}\\n\\n`, {\n      inline: t\n    }));\n    for (; \"string\" == typeof i[i.length - 1] && !i[i.length - 1].trim();) i.pop();\n    if (null === r.wrapper) return i;\n    const l = r.wrapper || (t ? \"span\" : \"div\");\n    let o;\n    if (i.length > 1 || r.forceWrapper) o = i;else {\n      if (1 === i.length) return o = i[0], \"string\" == typeof o ? d(\"span\", {\n        key: \"outer\"\n      }, o) : o;\n      o = null;\n    }\n    return e.createElement(l, {\n      key: \"outer\"\n    }, o);\n  }\n  function Z(n) {\n    const t = n.match(a);\n    return t ? t.reduce(function (n, t, r) {\n      const i = t.indexOf(\"=\");\n      if (-1 !== i) {\n        const o = function (e) {\n            return -1 !== e.indexOf(\"-\") && null === e.match(L) && (e = e.replace(j, function (e, n) {\n              return n.toUpperCase();\n            })), e;\n          }(t.slice(0, i)).trim(),\n          c = function (e) {\n            const n = e[0];\n            return ('\"' === n || \"'\" === n) && e.length >= 2 && e[e.length - 1] === n ? e.slice(1, -1) : e;\n          }(t.slice(i + 1).trim()),\n          a = l[o] || o,\n          s = n[a] = function (e, n) {\n            return \"style\" === e ? n.split(/;\\s?/).reduce(function (e, n) {\n              const t = n.slice(0, n.indexOf(\":\"));\n              return e[t.replace(/(-[a-z])/g, e => e[1].toUpperCase())] = n.slice(t.length + 1).trim(), e;\n            }, {}) : \"href\" === e || \"src\" === e ? je(n) : (n.match(M) && (n = n.slice(1, n.length - 1)), \"true\" === n || \"false\" !== n && n);\n          }(o, c);\n        \"string\" == typeof s && (A.test(s) || z.test(s)) && (n[a] = e.cloneElement(G(s.trim()), {\n          key: r\n        }));\n      } else \"style\" !== t && (n[l[t] || t] = !0);\n      return n;\n    }, {}) : null;\n  }\n  const q = [],\n    V = {},\n    X = {\n      0: {\n        match: Ie(u),\n        order: 1,\n        parse: (e, n, t) => ({\n          children: n(e[0].replace(p, \"\"), t)\n        }),\n        render: (e, n, t) => d(\"blockquote\", {\n          key: t.key\n        }, n(e.children, t))\n      },\n      1: {\n        match: Re(f),\n        order: 1,\n        parse: _e,\n        render: (e, n, t) => d(\"br\", {\n          key: t.key\n        })\n      },\n      2: {\n        match: Ie(h),\n        order: 1,\n        parse: _e,\n        render: (e, n, t) => d(\"hr\", {\n          key: t.key\n        })\n      },\n      3: {\n        match: Ie(g),\n        order: 0,\n        parse: e => ({\n          lang: void 0,\n          text: e[0].replace(/^ {4}/gm, \"\").replace(/\\n+$/, \"\")\n        }),\n        render: (e, t, r) => d(\"pre\", {\n          key: r.key\n        }, d(\"code\", n({}, e.attrs, {\n          className: e.lang ? `lang-${e.lang}` : \"\"\n        }), e.text))\n      },\n      4: {\n        match: Ie(m),\n        order: 0,\n        parse: e => ({\n          attrs: Z(e[3] || \"\"),\n          lang: e[2] || void 0,\n          text: e[4],\n          type: \"3\"\n        })\n      },\n      5: {\n        match: Me(y),\n        order: 3,\n        parse: e => ({\n          text: e[2]\n        }),\n        render: (e, n, t) => d(\"code\", {\n          key: t.key\n        }, e.text)\n      },\n      6: {\n        match: Ie(v),\n        order: 0,\n        parse: e => (q.push({\n          footnote: e[2],\n          identifier: e[1]\n        }), {}),\n        render: Fe\n      },\n      7: {\n        match: ze(b),\n        order: 1,\n        parse: e => ({\n          target: `#${r.slugify(e[1])}`,\n          text: e[1]\n        }),\n        render: (e, n, t) => d(\"a\", {\n          key: t.key,\n          href: je(e.target)\n        }, d(\"sup\", {\n          key: t.key\n        }, e.text))\n      },\n      8: {\n        match: ze(S),\n        order: 1,\n        parse: e => ({\n          completed: \"x\" === e[1].toLowerCase()\n        }),\n        render: (e, n, t) => d(\"input\", {\n          checked: e.completed,\n          key: t.key,\n          readOnly: !0,\n          type: \"checkbox\"\n        })\n      },\n      9: {\n        match: Ie(r.enforceAtxHeadings ? C : w),\n        order: 1,\n        parse: (e, n, t) => ({\n          children: Ne(n, e[2], t),\n          id: r.slugify(e[2]),\n          level: e[1].length\n        }),\n        render: (e, n, t) => d(`h${e.level}`, {\n          id: e.id,\n          key: t.key\n        }, n(e.children, t))\n      },\n      10: {\n        match: Ie(E),\n        order: 0,\n        parse: (e, n, t) => ({\n          children: Ne(n, e[1], t),\n          level: \"=\" === e[2] ? 1 : 2,\n          type: \"9\"\n        })\n      },\n      11: {\n        match: Re(A),\n        order: 1,\n        parse(e, n, t) {\n          const [, r] = e[3].match(re),\n            i = new RegExp(`^${r}`, \"gm\"),\n            l = e[3].replace(i, \"\"),\n            o = (a = l, Ce.some(e => e.test(a)) ? De : Ne);\n          var a;\n          const s = e[1].toLowerCase(),\n            d = -1 !== c.indexOf(s),\n            u = {\n              attrs: Z(e[2]),\n              noInnerParse: d,\n              tag: d ? s : e[1]\n            };\n          return t.inAnchor = t.inAnchor || \"a\" === s, d ? u.text = e[3] : u.children = o(n, l, t), t.inAnchor = !1, u;\n        },\n        render: (e, t, r) => d(e.tag, n({\n          key: r.key\n        }, e.attrs), e.text || t(e.children, r))\n      },\n      13: {\n        match: Re(z),\n        order: 1,\n        parse: e => ({\n          attrs: Z(e[2] || \"\"),\n          tag: e[1]\n        }),\n        render: (e, t, r) => d(e.tag, n({}, e.attrs, {\n          key: r.key\n        }))\n      },\n      12: {\n        match: Re(T),\n        order: 1,\n        parse: () => ({}),\n        render: Fe\n      },\n      14: {\n        match: Me(Se),\n        order: 1,\n        parse: e => ({\n          alt: e[1],\n          target: Be(e[2]),\n          title: e[3]\n        }),\n        render: (e, n, t) => d(\"img\", {\n          key: t.key,\n          alt: e.alt || void 0,\n          title: e.title || void 0,\n          src: je(e.target)\n        })\n      },\n      15: {\n        match: ze($e),\n        order: 3,\n        parse: (e, n, t) => ({\n          children: He(n, e[1], t),\n          target: Be(e[2]),\n          title: e[3]\n        }),\n        render: (e, n, t) => d(\"a\", {\n          key: t.key,\n          href: je(e.target),\n          title: e.title\n        }, n(e.children, t))\n      },\n      16: {\n        match: ze(U),\n        order: 0,\n        parse: e => ({\n          children: [{\n            text: e[1],\n            type: \"27\"\n          }],\n          target: e[1],\n          type: \"15\"\n        })\n      },\n      17: {\n        match: (e, n) => n.inAnchor ? null : ze(I)(e, n),\n        order: 0,\n        parse: e => ({\n          children: [{\n            text: e[1],\n            type: \"27\"\n          }],\n          target: e[1],\n          title: void 0,\n          type: \"15\"\n        })\n      },\n      18: {\n        match: ze(R),\n        order: 0,\n        parse(e) {\n          let n = e[1],\n            t = e[1];\n          return s.test(t) || (t = \"mailto:\" + t), {\n            children: [{\n              text: n.replace(\"mailto:\", \"\"),\n              type: \"27\"\n            }],\n            target: t,\n            type: \"15\"\n          };\n        }\n      },\n      20: be(d, 1),\n      33: be(d, 2),\n      19: {\n        match: Ie(k),\n        order: 3,\n        parse: _e,\n        render: () => \"\\n\"\n      },\n      21: {\n        match: Ue,\n        order: 3,\n        parse: Pe,\n        render: (e, n, t) => d(\"p\", {\n          key: t.key\n        }, n(e.children, t))\n      },\n      22: {\n        match: ze(N),\n        order: 0,\n        parse: e => (V[e[1]] = {\n          target: e[2],\n          title: e[4]\n        }, {}),\n        render: Fe\n      },\n      23: {\n        match: Me(H),\n        order: 0,\n        parse: e => ({\n          alt: e[1] || void 0,\n          ref: e[2]\n        }),\n        render: (e, n, t) => d(\"img\", {\n          key: t.key,\n          alt: e.alt,\n          src: je(V[e.ref].target),\n          title: V[e.ref].title\n        })\n      },\n      24: {\n        match: ze(D),\n        order: 0,\n        parse: (e, n, t) => ({\n          children: n(e[1], t),\n          fallbackChildren: n(e[0].replace(P, \"\\\\$1\"), t),\n          ref: e[2]\n        }),\n        render: (e, n, t) => V[e.ref] ? d(\"a\", {\n          key: t.key,\n          href: je(V[e.ref].target),\n          title: V[e.ref].title\n        }, n(e.children, t)) : d(\"span\", {\n          key: t.key\n        }, n(e.fallbackChildren, t))\n      },\n      25: {\n        match: Ie(B),\n        order: 1,\n        parse: Te,\n        render: (e, n, t) => d(\"table\", {\n          key: t.key\n        }, d(\"thead\", null, d(\"tr\", null, e.header.map(function (r, i) {\n          return d(\"th\", {\n            key: i,\n            style: Le(e, i)\n          }, n(r, t));\n        }))), d(\"tbody\", null, e.cells.map(function (r, i) {\n          return d(\"tr\", {\n            key: i\n          }, r.map(function (r, i) {\n            return d(\"td\", {\n              key: i,\n              style: Le(e, i)\n            }, n(r, t));\n          }));\n        })))\n      },\n      26: {\n        match: function (e, n) {\n          return n.inTable ? (n.inline = !0, W.exec(e)) : null;\n        },\n        order: 1,\n        parse: function () {\n          return {\n            type: \"26\"\n          };\n        },\n        render: () => \" | \"\n      },\n      27: {\n        match: Re(ne),\n        order: 4,\n        parse: e => ({\n          text: e[0].replace(O, (e, n) => r.namedCodesToUnicode[n] ? r.namedCodesToUnicode[n] : e)\n        }),\n        render: e => e.text\n      },\n      28: {\n        match: Me(Q),\n        order: 2,\n        parse: (e, n, t) => ({\n          children: n(e[2], t)\n        }),\n        render: (e, n, t) => d(\"strong\", {\n          key: t.key\n        }, n(e.children, t))\n      },\n      29: {\n        match: Me(J),\n        order: 3,\n        parse: (e, n, t) => ({\n          children: n(e[2], t)\n        }),\n        render: (e, n, t) => d(\"em\", {\n          key: t.key\n        }, n(e.children, t))\n      },\n      30: {\n        match: Me(ee),\n        order: 1,\n        parse: e => ({\n          text: e[1],\n          type: \"27\"\n        })\n      },\n      31: {\n        match: Me(K),\n        order: 3,\n        parse: Pe,\n        render: (e, n, t) => d(\"mark\", {\n          key: t.key\n        }, n(e.children, t))\n      },\n      32: {\n        match: Me(Y),\n        order: 3,\n        parse: Pe,\n        render: (e, n, t) => d(\"del\", {\n          key: t.key\n        }, n(e.children, t))\n      }\n    };\n  !0 === r.disableParsingRawHTML && (delete X[11], delete X[13]);\n  const ie = function (e) {\n      let n = Object.keys(e);\n      function t(r, i) {\n        let l = [],\n          o = \"\";\n        for (; r;) {\n          let c = 0;\n          for (; c < n.length;) {\n            const a = n[c],\n              s = e[a],\n              d = s.match(r, i, o);\n            if (d) {\n              const e = d[0];\n              r = r.substring(e.length);\n              const n = s.parse(d, t, i);\n              null == n.type && (n.type = a), l.push(n), o = e;\n              break;\n            }\n            c++;\n          }\n        }\n        return l;\n      }\n      return n.sort(function (n, t) {\n        let r = e[n].order,\n          i = e[t].order;\n        return r !== i ? r - i : 1;\n      }), function (e, n) {\n        return t(function (e) {\n          return e.replace(x, \"\\n\").replace($, \"\").replace(F, \"    \");\n        }(e), n);\n      };\n    }(X),\n    le = (oe = function (e, n) {\n      return function (t, r, i) {\n        const l = e[t.type].render;\n        return n ? n(() => l(t, r, i), t, r, i) : l(t, r, i);\n      };\n    }(X, r.renderRule), function e(n, t = {}) {\n      if (Array.isArray(n)) {\n        const r = t.key,\n          i = [];\n        let l = !1;\n        for (let r = 0; r < n.length; r++) {\n          t.key = r;\n          const o = e(n[r], t),\n            c = \"string\" == typeof o;\n          c && l ? i[i.length - 1] += o : null !== o && i.push(o), l = c;\n        }\n        return t.key = r, i;\n      }\n      return oe(n, e, t);\n    });\n  var oe;\n  const ce = G(t);\n  return q.length ? d(\"div\", null, ce, d(\"footer\", {\n    key: \"footer\"\n  }, q.map(function (e) {\n    return d(\"div\", {\n      id: r.slugify(e.identifier),\n      key: e.identifier\n    }, e.identifier, le(ie(e.footnote, {\n      inline: !0\n    })));\n  }))) : ce;\n}\nexport default (n => {\n  let {\n      children: r,\n      options: i\n    } = n,\n    l = function (e, n) {\n      if (null == e) return {};\n      var t,\n        r,\n        i = {},\n        l = Object.keys(e);\n      for (r = 0; r < l.length; r++) n.indexOf(t = l[r]) >= 0 || (i[t] = e[t]);\n      return i;\n    }(n, t);\n  return e.cloneElement(Ze(r, i), l);\n});\nexport { r as RuleType, Ze as compiler };","map":{"version":3,"names":["r","i","e","blockQuote","breakLine","breakThematic","codeBlock","codeFenced","codeInline","footnote","footnoteReference","gfmTask","heading","headingSetext","htmlBlock","htmlComment","htmlSelfClosing","image","link","linkAngleBraceStyleDetector","linkBareUrlDetector","linkMailtoDetector","newlineCoalescer","orderedList","paragraph","ref","refImage","refLink","table","tableSeparator","text","textBolded","textEmphasized","textEscaped","textMarked","textStrikethroughed","unorderedList","MAX","HIGH","MED","LOW","MIN","l","reduce","n","toLowerCase","for","o","amp","apos","gt","lt","nbsp","quot","c","a","s","d","u","p","f","h","m","g","y","k","x","v","b","$","S","w","C","E","A","O","T","L","z","M","I","R","U","j","B","N","H","D","P","_","F","W","G","Z","q","V","X","Q","J","K","Y","ee","ne","te","re","ie","le","oe","ce","ae","se","de","ue","pe","RegExp","fe","he","me","ge","ye","ke","xe","ve","be","t","match","exec","list","inline","simple","order","parse","replace","items","map","length","indexOf","ordered","start","render","key","type","$e","Se","we","Ce","Ee","Ae","test","Oe","inTable","trim","forEach","push","Te","split","align","cells","header","Le","textAlign","ze","Me","Ie","Re","Ue","endsWith","every","some","trimEnd","je","decodeURIComponent","Be","Ne","He","De","Pe","children","_e","Fe","We","filter","Boolean","join","Ge","shift","Ze","overrides","slugify","namedCodesToUnicode","createElement","className","forceInline","forceBlock","pop","wrapper","forceWrapper","toUpperCase","slice","cloneElement","lang","attrs","identifier","target","href","completed","checked","readOnly","enforceAtxHeadings","id","level","noInnerParse","tag","inAnchor","alt","title","src","fallbackChildren","style","disableParsingRawHTML","Object","keys","substring","sort","renderRule","Array","isArray","options","RuleType","compiler"],"sources":["/Users/zacharygarrison/Desktop/Portfolio Website/portfolio/node_modules/markdown-to-jsx/index.tsx"],"sourcesContent":["/* @jsx h */\n/**\n * markdown-to-jsx is a fork of\n * [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome\n * and extensible parsing infra... without it, half of the\n * optimizations here wouldn't be feasible. 🙏🏼\n */\nimport * as React from 'react'\n\n/**\n * Analogous to `node.type`. Please note that the values here may change at any time,\n * so do not hard code against the value directly.\n */\nexport const enum RuleType {\n  blockQuote = '0',\n  breakLine = '1',\n  breakThematic = '2',\n  codeBlock = '3',\n  codeFenced = '4',\n  codeInline = '5',\n  footnote = '6',\n  footnoteReference = '7',\n  gfmTask = '8',\n  heading = '9',\n  headingSetext = '10',\n  /** only available if not `disableHTMLParsing` */\n  htmlBlock = '11',\n  htmlComment = '12',\n  /** only available if not `disableHTMLParsing` */\n  htmlSelfClosing = '13',\n  image = '14',\n  link = '15',\n  /** emits a `link` 'node', does not render directly */\n  linkAngleBraceStyleDetector = '16',\n  /** emits a `link` 'node', does not render directly */\n  linkBareUrlDetector = '17',\n  /** emits a `link` 'node', does not render directly */\n  linkMailtoDetector = '18',\n  newlineCoalescer = '19',\n  orderedList = '20',\n  paragraph = '21',\n  ref = '22',\n  refImage = '23',\n  refLink = '24',\n  table = '25',\n  tableSeparator = '26',\n  text = '27',\n  textBolded = '28',\n  textEmphasized = '29',\n  textEscaped = '30',\n  textMarked = '31',\n  textStrikethroughed = '32',\n  unorderedList = '33',\n}\n\nconst enum Priority {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED,\n  /**\n   * inline elements\n   */\n  LOW,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN,\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = [\n  'allowFullScreen',\n  'allowTransparency',\n  'autoComplete',\n  'autoFocus',\n  'autoPlay',\n  'cellPadding',\n  'cellSpacing',\n  'charSet',\n  'className',\n  'classId',\n  'colSpan',\n  'contentEditable',\n  'contextMenu',\n  'crossOrigin',\n  'encType',\n  'formAction',\n  'formEncType',\n  'formMethod',\n  'formNoValidate',\n  'formTarget',\n  'frameBorder',\n  'hrefLang',\n  'inputMode',\n  'keyParams',\n  'keyType',\n  'marginHeight',\n  'marginWidth',\n  'maxLength',\n  'mediaGroup',\n  'minLength',\n  'noValidate',\n  'radioGroup',\n  'readOnly',\n  'rowSpan',\n  'spellCheck',\n  'srcDoc',\n  'srcLang',\n  'srcSet',\n  'tabIndex',\n  'useMap',\n].reduce(\n  (obj, x) => {\n    obj[x.toLowerCase()] = x\n    return obj\n  },\n  { for: 'htmlFor' }\n)\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script']\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R =\n  /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_])){3,} *(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R =\n  /^\\s*(`{3,}|~{3,}) *(\\S+)?([^\\n]*?)?\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)*\\n?/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:.*)\\n/\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_ATX_COMPLIANT_R =\n  /^ *(#{1,6}) +([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)\\/{0}>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R =\n  /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/gi\n\nconst HTML_COMMENT_R = /^<!--[\\s\\S]*?(?:-->)/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R =\n  /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/\nconst PARAGRAPH_R = /^[^\\n]+(?:  \\n|\\n{2,})/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s+<?([^\\s>]+)>?\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SQUARE_BRACKETS_R = /(\\[|\\])/g\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_SEPARATOR_R = /^ *\\| */\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CELL_END_TRIM = / *$/\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\nconst TEXT_BOLD_R =\n  /^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/\nconst TEXT_EMPHASIZED_R =\n  /^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1|\\w)/\nconst TEXT_MARKED_R = /^==((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)==/\nconst TEXT_STRIKETHROUGHED_R = /^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\nconst TEXT_PLAIN_R =\n  /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&#;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i\n\nconst TRIMstartING_NEWLINES = /^\\n+/\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\nconst UNESCAPE_URL_R = /\\\\([^\\\\])/g\n\ntype LIST_TYPE = 1 | 2\nconst ORDERED: LIST_TYPE = 1\nconst UNORDERED: LIST_TYPE = 2\n\nconst LIST_ITEM_END_R = / *\\n+$/\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst ORDERED_LIST_BULLET = '(?:\\\\d+\\\\.)'\nconst UNORDERED_LIST_BULLET = '(?:[*+-])'\n\nfunction generateListItemPrefix(type: LIST_TYPE) {\n  return (\n    '( *)(' +\n    (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n    ') +'\n  )\n}\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst ORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(UNORDERED)\n\nfunction generateListItemPrefixRegex(type: LIST_TYPE) {\n  return new RegExp(\n    '^' +\n      (type === ORDERED ? ORDERED_LIST_ITEM_PREFIX : UNORDERED_LIST_ITEM_PREFIX)\n  )\n}\n\nconst ORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(UNORDERED)\n\nfunction generateListItemRegex(type: LIST_TYPE) {\n  // recognize an individual list item:\n  //  * hi\n  //    this is part of the same item\n  //\n  //    as is this, which is a new paragraph in the same item\n  //\n  //  * but this is not part of the same item\n  return new RegExp(\n    '^' +\n      (type === ORDERED\n        ? ORDERED_LIST_ITEM_PREFIX\n        : UNORDERED_LIST_ITEM_PREFIX) +\n      '[^\\\\n]*(?:\\\\n' +\n      '(?!\\\\1' +\n      (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n      ' )[^\\\\n]*)*(\\\\n|$)',\n    'gm'\n  )\n}\n\nconst ORDERED_LIST_ITEM_R = generateListItemRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_R = generateListItemRegex(UNORDERED)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nfunction generateListRegex(type: LIST_TYPE) {\n  const bullet = type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET\n\n  return new RegExp(\n    '^( *)(' +\n      bullet +\n      ') ' +\n      '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n      '(?!\\\\1' +\n      bullet +\n      ' (?!' +\n      bullet +\n      ' ))\\\\n*' +\n      // the \\\\s*$ here is so that we can parse the inside of nested\n      // lists, where our content might end before we receive two `\\n`s\n      '|\\\\s*\\\\n*$)'\n  )\n}\n\nconst ORDERED_LIST_R = generateListRegex(ORDERED)\nconst UNORDERED_LIST_R = generateListRegex(UNORDERED)\n\nfunction generateListRule(\n  h: any,\n  type: LIST_TYPE\n): MarkdownToJSX.Rule<\n  MarkdownToJSX.OrderedListNode | MarkdownToJSX.UnorderedListNode\n> {\n  const ordered = type === ORDERED\n  const LIST_R = ordered ? ORDERED_LIST_R : UNORDERED_LIST_R\n  const LIST_ITEM_R = ordered ? ORDERED_LIST_ITEM_R : UNORDERED_LIST_ITEM_R\n  const LIST_ITEM_PREFIX_R = ordered\n    ? ORDERED_LIST_ITEM_PREFIX_R\n    : UNORDERED_LIST_ITEM_PREFIX_R\n\n  return {\n    match(source, state, prevCapture) {\n      // We only want to break into a list if we are at the start of a\n      // line. This is to avoid parsing \"hi * there\" with \"* there\"\n      // becoming a part of a list.\n      // You might wonder, \"but that's inline, so of course it wouldn't\n      // start a list?\". You would be correct! Except that some of our\n      // lists can be inline, because they might be inside another list,\n      // in which case we can parse with inline scope, but need to allow\n      // nested lists inside this inline scope.\n      const isStartOfLine = LIST_LOOKBEHIND_R.exec(prevCapture)\n      const isListBlock = state.list || (!state.inline && !state.simple)\n\n      if (isStartOfLine && isListBlock) {\n        source = isStartOfLine[1] + source\n\n        return LIST_R.exec(source)\n      } else {\n        return null\n      }\n    },\n    order: Priority.HIGH,\n    parse(capture, parse, state) {\n      const bullet = capture[2]\n      const start = ordered ? +bullet : undefined\n      const items = capture[0]\n        // recognize the end of a paragraph block inside a list item:\n        // two or more newlines at end end of the item\n        .replace(BLOCK_END_R, '\\n')\n        .match(LIST_ITEM_R)\n\n      let lastItemWasAParagraph = false\n      const itemContent = items.map(function (item, i) {\n        // We need to see how far indented the item is:\n        const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n        // And then we construct a regex to \"unindent\" the subsequent\n        // lines of the items by that amount:\n        const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n        // Before processing the item, we need a couple things\n        const content = item\n          // remove indents on trailing lines:\n          .replace(spaceRegex, '')\n          // remove the bullet:\n          .replace(LIST_ITEM_PREFIX_R, '')\n\n        // Handling \"loose\" lists, like:\n        //\n        //  * this is wrapped in a paragraph\n        //\n        //  * as is this\n        //\n        //  * as is this\n        const isLastItem = i === items.length - 1\n        const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n        // Any element in a list is a block if it contains multiple\n        // newlines. The last element in the list can also be a block\n        // if the previous item in the list was a block (this is\n        // because non-last items in the list can end with \\n\\n, but\n        // the last item can't, so we just \"inherit\" this property\n        // from our previous element).\n        const thisItemIsAParagraph =\n          containsBlocks || (isLastItem && lastItemWasAParagraph)\n        lastItemWasAParagraph = thisItemIsAParagraph\n\n        // backup our state for restoration afterwards. We're going to\n        // want to set state.list to true, and state.inline depending\n        // on our list's looseness.\n        const oldStateInline = state.inline\n        const oldStateList = state.list\n        state.list = true\n\n        // Parse inline if we're in a tight list, or block if we're in\n        // a loose list.\n        let adjustedContent\n        if (thisItemIsAParagraph) {\n          state.inline = false\n          adjustedContent = content.replace(LIST_ITEM_END_R, '\\n\\n')\n        } else {\n          state.inline = true\n          adjustedContent = content.replace(LIST_ITEM_END_R, '')\n        }\n\n        const result = parse(adjustedContent, state)\n\n        // Restore our state before returning\n        state.inline = oldStateInline\n        state.list = oldStateList\n\n        return result\n      })\n\n      return {\n        items: itemContent,\n        ordered: ordered,\n        start: start,\n      }\n    },\n    render(node, output, state) {\n      const Tag = node.ordered ? 'ol' : 'ul'\n\n      return (\n        <Tag\n          key={state.key}\n          start={node.type === RuleType.orderedList ? node.start : undefined}\n        >\n          {node.items.map(function generateListItem(item, i) {\n            return <li key={i}>{output(item, state)}</li>\n          })}\n        </Tag>\n      )\n    },\n  }\n}\n\nconst LINK_R = /^\\[([^\\]]*)]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/\nconst IMAGE_R = /^!\\[([^\\]]*)]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/\n\nconst NON_PARAGRAPH_BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_FENCED_R,\n  CODE_BLOCK_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HEADING_ATX_COMPLIANT_R,\n  HTML_COMMENT_R,\n  NP_TABLE_R,\n  ORDERED_LIST_ITEM_R,\n  ORDERED_LIST_R,\n  UNORDERED_LIST_ITEM_R,\n  UNORDERED_LIST_R,\n]\n\nconst BLOCK_SYNTAXES = [\n  ...NON_PARAGRAPH_BLOCK_SYNTAXES,\n  PARAGRAPH_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n]\n\nfunction containsBlockSyntax(input: string) {\n  return BLOCK_SYNTAXES.some(r => r.test(input))\n}\n\n/** Remove symmetrical leading and trailing quotes */\nfunction unquote(str: string) {\n  const first = str[0]\n  if (\n    (first === '\"' || first === \"'\") &&\n    str.length >= 2 &&\n    str[str.length - 1] === first\n  ) {\n    return str.slice(1, -1)\n  }\n  return str\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nfunction slugify(str: string) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[][] {\n  const prevInTable = state.inTable\n  state.inTable = true\n  const tableRow = parse(source.trim(), state)\n  state.inTable = prevInTable\n\n  let cells = [[]]\n  tableRow.forEach(function (node, i) {\n    if (node.type === RuleType.tableSeparator) {\n      // Filter out empty table separators at the start/end:\n      if (i !== 0 && i !== tableRow.length - 1) {\n        // Split the current row:\n        cells.push([])\n      }\n    } else {\n      if (\n        node.type === RuleType.text &&\n        (tableRow[i + 1] == null ||\n          tableRow[i + 1].type === RuleType.tableSeparator)\n      ) {\n        node.text = node.text.replace(TABLE_CELL_END_TRIM, '')\n      }\n      cells[cells.length - 1].push(node)\n    }\n  })\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  state.inline = true\n  const header = parseTableRow(capture[1], parse, state)\n  const align = parseTableAlign(capture[2])\n  const cells = parseTableCells(capture[3], parse, state)\n  state.inline = false\n\n  return {\n    align: align,\n    cells: cells,\n    header: header,\n    type: RuleType.table,\n  }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\nfunction attributeValueToJSXPropValue(\n  key: keyof React.AllHTMLAttributes<Element>,\n  value: string\n): any {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function (styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'))\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key.replace(/(-[a-z])/g, substr =>\n        substr[1].toUpperCase()\n      )\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim()\n\n      return styles\n    }, {})\n  } else if (key === 'href' || key === 'src') {\n    return sanitizeUrl(value)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1)\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules)\n\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      let order = rules[type].order\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  ruleList.sort(function (typeA, typeB) {\n    let orderA = rules[typeA].order\n    let orderB = rules[typeB].order\n\n    // Sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB\n    }\n\n    return 1\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    let result = []\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    let prevCapture = ''\n    while (source) {\n      let i = 0\n      while (i < ruleList.length) {\n        const ruleType = ruleList[i]\n        const rule = rules[ruleType]\n        const capture = rule.match(source, state, prevCapture)\n\n        if (capture) {\n          const currCaptureString = capture[0]\n          source = source.substring(currCaptureString.length)\n          const parsed = rule.parse(capture, nestedParse, state)\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType as unknown as RuleType\n          }\n\n          result.push(parsed)\n\n          prevCapture = currCaptureString\n          break\n        }\n\n        i++\n      }\n    }\n\n    return result\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return function match(source, state: MarkdownToJSX.State) {\n    if (state.inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return function match(source: string /*, state*/) {\n    return regex.exec(source)\n  }\n}\n\nfunction matchParagraph(\n  source: string,\n  state: MarkdownToJSX.State,\n  prevCapturedString?: string\n) {\n  if (state.inline || state.simple) {\n    return null\n  }\n\n  if (prevCapturedString && !prevCapturedString.endsWith('\\n')) {\n    // don't match continuation of a line\n    return null\n  }\n\n  let match = ''\n\n  source.split('\\n').every(line => {\n    // bail out on first sign of non-paragraph block\n    if (NON_PARAGRAPH_BLOCK_SYNTAXES.some(regex => regex.test(line))) {\n      return false\n    }\n    match += line + '\\n'\n    return line.trim()\n  })\n\n  const captured = match.trimEnd()\n  if (captured == '') {\n    return null\n  }\n\n  return [match, captured]\n}\n\nfunction sanitizeUrl(url: string): string | undefined {\n  try {\n    const decoded = decodeURIComponent(url).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data(?!:image)):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return undefined\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return url\n}\n\nfunction unescapeUrl(rawUrlString: string): string {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1')\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = true\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = false\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(\n  parse,\n  children,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  state.inline = false\n  return parse(children, state)\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<{\n  children: MarkdownToJSX.ParserResult[]\n}> = (capture, parse, state: MarkdownToJSX.State) => {\n  return {\n    children: parseInline(parse, capture[1], state),\n  }\n}\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction reactFor(render) {\n  return function patchedRender(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactChild[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state.key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state.key = i\n\n        const nodeOut = patchedRender(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else if (nodeOut !== null) {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state.key = oldKey\n\n      return result\n    }\n\n    return render(ast, patchedRender, state)\n  }\n}\n\nfunction createRenderer(\n  rules: MarkdownToJSX.Rules,\n  userRender?: MarkdownToJSX.Options['renderRule']\n) {\n  return function renderRule(\n    ast: MarkdownToJSX.ParserResult,\n    render: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactChild {\n    const renderer = rules[ast.type].render as MarkdownToJSX.Rule['render']\n\n    return userRender\n      ? userRender(() => renderer(ast, render, state), ast, render, state)\n      : renderer(ast, render, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nexport function compiler(\n  markdown: string,\n  options: MarkdownToJSX.Options = {}\n) {\n  options.overrides = options.overrides || {}\n  options.slugify = options.slugify || slugify\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  const createElementFn = options.createElement || React.createElement\n\n  // JSX custom pragma\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n      id?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return createElementFn(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): JSX.Element {\n    let inline = false\n\n    if (options.forceInline) {\n      inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        inline\n          ? input\n          : `${input.trimEnd().replace(TRIMstartING_NEWLINES, '')}\\n\\n`,\n        {\n          inline,\n        }\n      )\n    )\n\n    while (\n      typeof arr[arr.length - 1] === 'string' &&\n      !arr[arr.length - 1].trim()\n    ) {\n      arr.pop()\n    }\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return React.createElement(wrapper, { key: 'outer' }, jsx)\n  }\n\n  function attrStringToMap(str: string): JSX.IntrinsicAttributes {\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n    if (!attributes) {\n      return null\n    }\n\n    return attributes.reduce(function (map, raw, index) {\n      const delimiterIdx = raw.indexOf('=')\n\n      if (delimiterIdx !== -1) {\n        const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n        const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n        const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n        const normalizedValue = (map[mappedKey] = attributeValueToJSXPropValue(\n          key,\n          value\n        ))\n\n        if (\n          typeof normalizedValue === 'string' &&\n          (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n            HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n        ) {\n          map[mappedKey] = React.cloneElement(compile(normalizedValue.trim()), {\n            key: index,\n          })\n        }\n      } else if (raw !== 'style') {\n        map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n      }\n\n      return map\n    }, {})\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { footnote: string; identifier: string }[] = []\n  const refs: { [key: string]: { target: string; title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom\n   * h() JSX pragma; this allows the override functionality to be\n   * automatically applied\n   */\n  // @ts-ignore\n  const rules: MarkdownToJSX.Rules = {\n    [RuleType.blockQuote]: {\n      match: blockRegex(BLOCKQUOTE_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        return {\n          children: parse(\n            capture[0].replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, ''),\n            state\n          ),\n        }\n      },\n      render(node, output, state) {\n        return (\n          <blockquote key={state.key}>\n            {output(node.children, state)}\n          </blockquote>\n        )\n      },\n    },\n\n    [RuleType.breakLine]: {\n      match: anyScopeRegex(BREAK_LINE_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      render(_, __, state) {\n        return <br key={state.key} />\n      },\n    },\n\n    [RuleType.breakThematic]: {\n      match: blockRegex(BREAK_THEMATIC_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      render(_, __, state) {\n        return <hr key={state.key} />\n      },\n    },\n\n    [RuleType.codeBlock]: {\n      match: blockRegex(CODE_BLOCK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          lang: undefined,\n          text: capture[0].replace(/^ {4}/gm, '').replace(/\\n+$/, ''),\n        }\n      },\n\n      render(node, output, state) {\n        return (\n          <pre key={state.key}>\n            <code\n              {...node.attrs}\n              className={node.lang ? `lang-${node.lang}` : ''}\n            >\n              {node.text}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs?: ReturnType<typeof attrStringToMap>\n      lang?: string\n      text: string\n    }>,\n\n    [RuleType.codeFenced]: {\n      match: blockRegex(CODE_BLOCK_FENCED_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          // if capture[3] it's additional metadata\n          attrs: attrStringToMap(capture[3] || ''),\n          lang: capture[2] || undefined,\n          text: capture[4],\n          type: RuleType.codeBlock,\n        }\n      },\n    },\n\n    [RuleType.codeInline]: {\n      match: simpleInlineRegex(CODE_INLINE_R),\n      order: Priority.LOW,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return <code key={state.key}>{node.text}</code>\n      },\n    },\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    [RuleType.footnote]: {\n      match: blockRegex(FOOTNOTE_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        })\n\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.footnoteReference]: {\n      match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse*/) {\n        return {\n          target: `#${options.slugify(capture[1])}`,\n          text: capture[1],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <a key={state.key} href={sanitizeUrl(node.target)}>\n            <sup key={state.key}>{node.text}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ target: string; text: string }>,\n\n    [RuleType.gfmTask]: {\n      match: inlineRegex(GFM_TASK_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      render(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state.key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ completed: boolean }>,\n\n    [RuleType.heading]: {\n      match: blockRegex(\n        options.enforceAtxHeadings ? HEADING_ATX_COMPLIANT_R : HEADING_R\n      ),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[2], state),\n          id: options.slugify(capture[2]),\n          level: capture[1].length as MarkdownToJSX.HeadingNode['level'],\n        }\n      },\n      render(node, output, state) {\n        return h(\n          `h${node.level}`,\n          { id: node.id, key: state.key },\n          output(node.children, state)\n        )\n      },\n    },\n\n    [RuleType.headingSetext]: {\n      match: blockRegex(HEADING_SETEXT_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: RuleType.heading,\n        }\n      },\n    },\n\n    [RuleType.htmlBlock]: {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        const ast = {\n          attrs: attrStringToMap(capture[2]),\n          noInnerParse: noInnerParse,\n          tag: noInnerParse ? tagName : capture[1],\n        } as {\n          attrs: ReturnType<typeof attrStringToMap>\n          children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n          noInnerParse: Boolean\n          tag: MarkdownToJSX.HTMLTags\n          text?: string | undefined\n        }\n\n        state.inAnchor = state.inAnchor || tagName === 'a'\n\n        if (noInnerParse) {\n          ast.text = capture[3]\n        } else {\n          ast.children = parseFunc(parse, trimmed, state)\n        }\n\n        /**\n         * if another html block is detected within, parse as block,\n         * otherwise parse as inline to pick up any further markdown\n         */\n        state.inAnchor = false\n\n        return ast\n      },\n      render(node, output, state) {\n        return (\n          <node.tag key={state.key} {...node.attrs}>\n            {node.text || output(node.children, state)}\n          </node.tag>\n        )\n      },\n    },\n\n    [RuleType.htmlSelfClosing]: {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          attrs: attrStringToMap(capture[2] || ''),\n          tag: capture[1],\n        }\n      },\n      render(node, output, state) {\n        return <node.tag {...node.attrs} key={state.key} />\n      },\n    },\n\n    [RuleType.htmlComment]: {\n      match: anyScopeRegex(HTML_COMMENT_R),\n      order: Priority.HIGH,\n      parse() {\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.image]: {\n      match: simpleInlineRegex(IMAGE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          alt: capture[1],\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={sanitizeUrl(node.target)}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      alt?: string\n      target: string\n      title?: string\n    }>,\n\n    [RuleType.link]: {\n      match: inlineRegex(LINK_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          children: parseSimpleInline(parse, capture[1], state),\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <a key={state.key} href={sanitizeUrl(node.target)} title={node.title}>\n            {output(node.children, state)}\n          </a>\n        )\n      },\n    },\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    [RuleType.linkAngleBraceStyleDetector]: {\n      match: inlineRegex(LINK_AUTOLINK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkBareUrlDetector]: {\n      match: (source, state) => {\n        if (state.inAnchor) {\n          return null\n        }\n        return inlineRegex(LINK_AUTOLINK_BARE_URL_R)(source, state)\n      },\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkMailtoDetector]: {\n      match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          children: [\n            {\n              text: address.replace('mailto:', ''),\n              type: RuleType.text,\n            },\n          ],\n          target: target,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.orderedList]: generateListRule(\n      h,\n      ORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.OrderedListNode>,\n\n    [RuleType.unorderedList]: generateListRule(\n      h,\n      UNORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.UnorderedListNode>,\n\n    [RuleType.newlineCoalescer]: {\n      match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      order: Priority.LOW,\n      parse: captureNothing,\n      render(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    [RuleType.paragraph]: {\n      match: matchParagraph,\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <p key={state.key}>{output(node.children, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    [RuleType.ref]: {\n      match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      order: Priority.MAX,\n      parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        }\n\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.refImage]: {\n      match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      order: Priority.MAX,\n      parse(capture) {\n        return {\n          alt: capture[1] || undefined,\n          ref: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt}\n            src={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; ref: string }>,\n\n    [RuleType.refLink]: {\n      match: inlineRegex(REFERENCE_LINK_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          children: parse(capture[1], state),\n          fallbackChildren: parse(\n            capture[0].replace(SQUARE_BRACKETS_R, '\\\\$1'),\n            state\n          ),\n          ref: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state.key}\n            href={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          >\n            {output(node.children, state)}\n          </a>\n        ) : (\n          <span key={state.key}>{output(node.fallbackChildren, state)}</span>\n        )\n      },\n    },\n\n    [RuleType.table]: {\n      match: blockRegex(NP_TABLE_R),\n      order: Priority.HIGH,\n      parse: parseTable,\n      render(node, output, state) {\n        return (\n          <table key={state.key}>\n            <thead>\n              <tr>\n                {node.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(node, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {node.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(node, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    },\n\n    [RuleType.tableSeparator]: {\n      match: function (source, state) {\n        if (!state.inTable) {\n          return null\n        }\n        state.inline = true\n        return TABLE_SEPARATOR_R.exec(source)\n      },\n      order: Priority.HIGH,\n      parse: function () {\n        return { type: RuleType.tableSeparator }\n      },\n      // These shouldn't be reached, but in case they are, be reasonable:\n      render() {\n        return ' | '\n      },\n    },\n\n    [RuleType.text]: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      match: anyScopeRegex(TEXT_PLAIN_R),\n      order: Priority.MIN,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full\n            }),\n        }\n      },\n      render(node /*, output, state*/) {\n        return node.text\n      },\n    },\n\n    [RuleType.textBolded]: {\n      match: simpleInlineRegex(TEXT_BOLD_R),\n      order: Priority.MED,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      render(node, output, state) {\n        return <strong key={state.key}>{output(node.children, state)}</strong>\n      },\n    },\n\n    [RuleType.textEmphasized]: {\n      match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      render(node, output, state) {\n        return <em key={state.key}>{output(node.children, state)}</em>\n      },\n    },\n\n    [RuleType.textEscaped]: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      match: simpleInlineRegex(TEXT_ESCAPED_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[1],\n          type: RuleType.text,\n        }\n      },\n    },\n\n    [RuleType.textMarked]: {\n      match: simpleInlineRegex(TEXT_MARKED_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <mark key={state.key}>{output(node.children, state)}</mark>\n      },\n    },\n\n    [RuleType.textStrikethroughed]: {\n      match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <del key={state.key}>{output(node.children, state)}</del>\n      },\n    },\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //   let { match: match, parse: parse } = rules[key]\n\n  //   rules[key].match = (...args) => {\n  //     const start = performance.now()\n  //     const result = match(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(\n  //         `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${args[0]}`\n  //       )\n\n  //     return result\n  //   }\n\n  //   rules[key].parse = (...args) => {\n  //     const start = performance.now()\n  //     const result = parse(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(`Slow parse for ${key}: ${delta.toFixed(3)}ms`)\n\n  //     console.log(`${key}:parse`, `${delta.toFixed(3)}ms`, args[0])\n\n  //     return result\n  //   }\n  // })\n\n  if (options.disableParsingRawHTML === true) {\n    delete rules[RuleType.htmlBlock]\n    delete rules[RuleType.htmlSelfClosing]\n  }\n\n  const parser = parserFor(rules)\n  const emitter: Function = reactFor(createRenderer(rules, options.renderRule))\n\n  const jsx = compile(markdown)\n\n  if (footnotes.length) {\n    return (\n      <div>\n        {jsx}\n        <footer key=\"footer\">\n          {footnotes.map(function createFootnote(def) {\n            return (\n              <div id={options.slugify(def.identifier)} key={def.identifier}>\n                {def.identifier}\n                {emitter(parser(def.footnote, { inline: true }))}\n              </div>\n            )\n          })}\n        </footer>\n      </div>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<{\n  [key: string]: any\n  children: string\n  options?: MarkdownToJSX.Options\n}> = ({ children, options, ...props }) => {\n  if (process.env.NODE_ENV !== 'production' && typeof children !== 'string') {\n    console.error(\n      'markdown-to-jsx: <Markdown> component only accepts a single string as a child, received:',\n      children\n    )\n  }\n\n  return React.cloneElement(\n    compiler(children, options),\n    props as JSX.IntrinsicAttributes\n  )\n}\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof JSX.IntrinsicElements\n\n  export type State = {\n    /** true if the current content is inside anchor link grammar */\n    inAnchor?: boolean\n    /** true if parsing in an inline context (subset of rules around formatting and links) */\n    inline?: boolean\n    /** true if in a table */\n    inTable?: boolean\n    /** use this for the `key` prop */\n    key?: React.Key\n    /** true if in a list */\n    list?: boolean\n    /** true if parsing in inline context w/o links */\n    simple?: boolean\n  }\n\n  export interface BlockQuoteNode {\n    children: MarkdownToJSX.ParserResult[]\n    type: RuleType.blockQuote\n  }\n\n  export interface BreakLineNode {\n    type: RuleType.breakLine\n  }\n\n  export interface BreakThematicNode {\n    type: RuleType.breakThematic\n  }\n\n  export interface CodeBlockNode {\n    type: RuleType.codeBlock\n    attrs?: JSX.IntrinsicAttributes\n    lang?: string\n    text: string\n  }\n\n  export interface CodeFencedNode {\n    type: RuleType.codeFenced\n  }\n\n  export interface CodeInlineNode {\n    type: RuleType.codeInline\n    text: string\n  }\n\n  export interface FootnoteNode {\n    type: RuleType.footnote\n  }\n\n  export interface FootnoteReferenceNode {\n    type: RuleType.footnoteReference\n    target: string\n    text: string\n  }\n\n  export interface GFMTaskNode {\n    type: RuleType.gfmTask\n    completed: boolean\n  }\n\n  export interface HeadingNode {\n    type: RuleType.heading\n    children: MarkdownToJSX.ParserResult[]\n    id: string\n    level: 1 | 2 | 3 | 4 | 5 | 6\n  }\n\n  export interface HeadingSetextNode {\n    type: RuleType.headingSetext\n  }\n\n  export interface HTMLCommentNode {\n    type: RuleType.htmlComment\n  }\n\n  export interface ImageNode {\n    type: RuleType.image\n    alt?: string\n    target: string\n    title?: string\n  }\n\n  export interface LinkNode {\n    type: RuleType.link\n    children: MarkdownToJSX.ParserResult[]\n    target: string\n    title?: string\n  }\n\n  export interface LinkAngleBraceNode {\n    type: RuleType.linkAngleBraceStyleDetector\n  }\n\n  export interface LinkBareURLNode {\n    type: RuleType.linkBareUrlDetector\n  }\n\n  export interface LinkMailtoNode {\n    type: RuleType.linkMailtoDetector\n  }\n\n  export interface OrderedListNode {\n    type: RuleType.orderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: true\n    start?: number\n  }\n\n  export interface UnorderedListNode {\n    type: RuleType.unorderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: false\n  }\n\n  export interface NewlineNode {\n    type: RuleType.newlineCoalescer\n  }\n\n  export interface ParagraphNode {\n    type: RuleType.paragraph\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ReferenceNode {\n    type: RuleType.ref\n  }\n\n  export interface ReferenceImageNode {\n    type: RuleType.refImage\n    alt?: string\n    ref: string\n  }\n\n  export interface ReferenceLinkNode {\n    type: RuleType.refLink\n    children: MarkdownToJSX.ParserResult[]\n    fallbackChildren: MarkdownToJSX.ParserResult[]\n    ref: string\n  }\n\n  export interface TableNode {\n    type: RuleType.table\n    /**\n     * alignment for each table column\n     */\n    align: ('left' | 'right' | 'center')[]\n    cells: MarkdownToJSX.ParserResult[][][]\n    header: MarkdownToJSX.ParserResult[][]\n  }\n\n  export interface TableSeparatorNode {\n    type: RuleType.tableSeparator\n  }\n\n  export interface TextNode {\n    type: RuleType.text\n    text: string\n  }\n\n  export interface BoldTextNode {\n    type: RuleType.textBolded\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ItalicTextNode {\n    type: RuleType.textEmphasized\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface EscapedTextNode {\n    type: RuleType.textEscaped\n  }\n\n  export interface MarkedTextNode {\n    type: RuleType.textMarked\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface StrikethroughTextNode {\n    type: RuleType.textStrikethroughed\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface HTMLNode {\n    type: RuleType.htmlBlock\n    attrs: JSX.IntrinsicAttributes\n    children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n    noInnerParse: Boolean\n    tag: MarkdownToJSX.HTMLTags\n    text?: string | undefined\n  }\n\n  export interface HTMLSelfClosingNode {\n    type: RuleType.htmlSelfClosing\n    attrs: JSX.IntrinsicAttributes\n    tag: string\n  }\n\n  export type ParserResult =\n    | BlockQuoteNode\n    | BreakLineNode\n    | BreakThematicNode\n    | CodeBlockNode\n    | CodeFencedNode\n    | CodeInlineNode\n    | FootnoteNode\n    | FootnoteReferenceNode\n    | GFMTaskNode\n    | HeadingNode\n    | HeadingSetextNode\n    | HTMLCommentNode\n    | ImageNode\n    | LinkNode\n    | LinkAngleBraceNode\n    | LinkBareURLNode\n    | LinkMailtoNode\n    | OrderedListNode\n    | UnorderedListNode\n    | NewlineNode\n    | ParagraphNode\n    | ReferenceNode\n    | ReferenceImageNode\n    | ReferenceLinkNode\n    | TableNode\n    | TableSeparatorNode\n    | TextNode\n    | BoldTextNode\n    | ItalicTextNode\n    | EscapedTextNode\n    | MarkedTextNode\n    | StrikethroughTextNode\n    | HTMLNode\n    | HTMLSelfClosingNode\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult[]\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State\n  ) => JSX.Element\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    order: Priority\n    parse: MarkdownToJSX.Parser<Omit<ParserOutput, 'type'>>\n    render?: (\n      node: ParserOutput,\n      /**\n       * Continue rendering AST nodes if applicable.\n       */\n      render: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactChild\n  }\n\n  export type Rules = {\n    [K in ParserResult['type']]: Rule<Extract<ParserResult, { type: K }>>\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ElementType\n        props: Object\n      }>\n    | React.ElementType\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: JSX.IntrinsicAttributes,\n      ...children: React.ReactChild[]\n    ) => React.ReactChild\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to have space between hash sign and the header text which\n     * is explicitly stated in the most of the markdown specs.\n     * https://github.github.com/gfm/#atx-heading\n     * `The opening sequence of # characters must be followed by a space or by the end of line.`\n     */\n    enforceAtxHeadings: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Forces the compiler to wrap results, even if there is only a single\n     * child or no children.\n     */\n    forceWrapper: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entities are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Allows for full control over rendering of particular rules.\n     * For example, to implement a LaTeX renderer such as `react-katex`:\n     *\n     * ```\n     * renderRule(next, node, output, state) {\n     *   if (node.type === RuleType.codeBlock && node.lang === 'latex') {\n     *     return (\n     *       <TeX as=\"div\" key={state.key}>\n     *         {String.raw`${node.text}`}\n     *       </TeX>\n     *     )\n     *   }\n     *\n     *   return next();\n     * }\n     * ```\n     *\n     * Thar be dragons obviously, but you can do a lot with this\n     * (have fun!) To see how things work internally, check the `render`\n     * method in source for a particular rule.\n     */\n    renderRule: (\n      /** Resume normal processing, call this function as a fallback if you are not returning custom JSX. */\n      next: () => React.ReactChild,\n      node: ParserResult,\n      renderAST: RuleOutput,\n      state: State\n    ) => React.ReactChild\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (source: string) => string\n\n    /**\n     * Declare the type of the wrapper to be used when there are multiple\n     * children to render. Set to `null` to get an array of children back\n     * without any wrapper, or use `React.Fragment` to get a React element\n     * that won't show up in the DOM.\n     */\n    wrapper: React.ElementType | null\n  }>\n}\n\nexport default Markdown\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}